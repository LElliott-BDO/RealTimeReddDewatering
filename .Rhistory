pch = c( rep(NA, nAlt), 16, 16, 16),
col=c(cols[1:(nAlt)], "light blue", "darkorange2",  "grey"),
lty= c(rep(1, nAlt), NA, NA, NA), cex=0.8, xpd = TRUE, horiz = TRUE)
format(Sys.time(), '%d %B, %Y')
library(tinytex)
library(data.table)
library(plyr)
library(lubridate)
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read in redd data, converting flow to a numeric and date from character to date value
redds <- read.csv("Redds.csv", colClasses=c('character', 'character', 'num.with.commas'))
redds$Estimated.Date.of.Emergence <- as.Date(redds$Estimated.Date.of.Emergence, "%m/%d/%Y")
reddsAll <- redds
#Read in KES flow data, converting flow to a numeric and date from character to date value
kesFlow <- read.csv("kesFlow.csv")
kesFlow <- read.csv("kesFlow.csv", colClasses=c('character', rep('num.with.commas', length(kesFlow) - 1)))
kesFlow$Date <- as.Date(kesFlow$Date, "%m/%d/%Y")
nAlt <- length(kesFlow) - 1
realFlow <- read.csv("realtimeKES.csv")
realFlow$Date <- as.Date(realFlow$Date, "%m/%d/%Y")
actualDate <- format(Sys.time(), '%d %B, %Y')
reddCount <- 1059 #check YYYY Winter-run data file.xls, Reporting page (currently cell B88)
countDate <- "September 28, 2022"
updatedReddInfoDate <- "October 5, 2022"
conservationFish <- 79
#show_extra = TRUE
library(tinytex)
library(data.table)
library(plyr)
library(lubridate)
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read in redd data, converting flow to a numeric and date from character to date value
redds <- read.csv("Redds.csv", colClasses=c('character', 'character', 'num.with.commas'))
redds$Estimated.Date.of.Emergence <- as.Date(redds$Estimated.Date.of.Emergence, "%m/%d/%Y")
reddsAll <- redds
#Read in KES flow data, converting flow to a numeric and date from character to date value
kesFlow <- read.csv("kesFlow.csv")
kesFlow <- read.csv("kesFlow.csv", colClasses=c('character', rep('num.with.commas', length(kesFlow) - 1)))
kesFlow$Date <- as.Date(kesFlow$Date, "%m/%d/%Y")
nAlt <- length(kesFlow) - 1
realFlow <- read.csv("realtimeKES.csv")
realFlow$Date <- as.Date(realFlow$Date, "%m/%d/%Y")
actualDate <- format(Sys.time(), '%d %B, %Y')
nAlt
getwd()
getwd()
unlink("Real-time Estimates_Prelim_Automated_Report_cache", recursive = TRUE)
unlink("Real-time Estimates_Prelim_Automated_Report_cache", recursive = TRUE)
reddCount <- 1059 #check YYYY Winter-run data file.xls, Reporting page (currently cell B88)
countDate <- "September 28, 2022"
updatedReddInfoDate <- "October 5, 2022"
conservationFish <- 79
#show_extra = TRUE
setwd("I:/Lisa/Redd Dewatering/Real-time Estimates")
library(tinytex)
library(data.table)
library(plyr)
library(lubridate)
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read in redd data, converting flow to a numeric and date from character to date value
redds <- read.csv("Redds.csv", colClasses=c('character', 'character', 'num.with.commas'))
redds$Estimated.Date.of.Emergence <- as.Date(redds$Estimated.Date.of.Emergence, "%m/%d/%Y")
reddsAll <- redds
#Read in KES flow data, converting flow to a numeric and date from character to date value
kesFlow <- read.csv("kesFlow.csv")
kesFlow <- read.csv("kesFlow.csv", colClasses=c('character', rep('num.with.commas', length(kesFlow) - 1)))
kesFlow$Date <- as.Date(kesFlow$Date, "%m/%d/%Y")
nAlt <- length(kesFlow) - 1
realFlow <- read.csv("realtimeKES.csv")
realFlow$Date <- as.Date(realFlow$Date, "%m/%d/%Y")
actualDate <- format(Sys.time(), '%d %B, %Y')
# Thousand Acre Feet
for(a in 1:nAlt){
kesFlow[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,5), "cfs")] <- NA
kesFlow[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,5), "taf")] <- NA
}
for(a in 1:nAlt){
for(r in 1: nrow(kesFlow)){
kesFlow[r, paste0("A", substr(names(kesFlow)[a + 1], 4,5), "cfs")] <- kesFlow[r, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))]
kesFlow[r, paste0("A", substr(names(kesFlow)[a + 1], 4,5), "taf")] <- (kesFlow[r, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))]*1.983)/1000
}
}
septKesFlow <- subset(kesFlow, months(kesFlow$Date) == "September")
octKesFlow <- subset(kesFlow, months(kesFlow$Date) == "October")
# Estimated number of redds dewatered
for(a in 1:(nAlt)){
redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))] <- NA
}
redds <- subset(redds, redds$Status == "OK" | redds$Status == "DEWATERED")
for(r in 1:nrow(redds)){ #loop over redds
for(f in 1:nrow(kesFlow)){ #loop over KES flow
for(a in 1:nAlt){ #loop over alternatives
if(kesFlow$Date[f] == redds$Estimated.Date.of.Emergence[r]){ #if dates match
if(kesFlow[f, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))] <= redds$ACTUAL.or.ESTIMATED..DEWATER.FLOW[r]){ #If KES flow is < or = redd dewatering flow, 1 (dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))] <- 1
} else{ #If KES flow is greater than redd dewatering flow, mark 0 (not dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))] <- redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))]
} #ends else
}
} #ends if date is the same
} #end looping over KES flow dataframe
} #end looping over redds dataframe
#Based on the `r countDate` redd count:
# Estimated number of redds dewatered with a 100cfs buffer
for(a in 1:nAlt){
redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")] <- NA
}
for(r in 1:nrow(redds)){ #loop over redds
for(f in 1:nrow(kesFlow)){ #loop over KES flow
for(a in 1:nAlt){ #loop over alternatives
if(kesFlow$Date[f] == redds$Estimated.Date.of.Emergence[r]){ #if dates match
if(kesFlow[f, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))] <= redds$ACTUAL.or.ESTIMATED..DEWATER.FLOW[r] + 100){ #If KES flow is < or = redd dewatering flow, 1 (dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")] <- 1
} else{ #If KES flow is greater than redd dewatering flow, mark 0 (not dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")] <- redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))]
} #ends else
}
} #ends if date is the same
} #end looping over KES flow dataframe
} #end looping over redds dataframe
#Based on the `r countDate` redd count:
Metric <- c("Avg Sept Flow (cfs)", "Avg Oct Flow (cfs)", "Total Sept-Oct Flow (TAF)", "Redds dewatered", "Percent Lost", "Redds dewatered (w/ 100cfs buffer)", "Percent Lost (w/ 100cfs buffer)")
table <- data.frame(Metric)
d <- rep(NA, nAlt)
dflist = vector("list", nAlt) # creating an empty list
dfnames <- rep(NA, nAlt)
for(a in 1:(nAlt)){
d[a] = paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))
dfnames[a] = paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))
names(dflist) = dfnames # naming the list
dflist[[a]] <- as.character(c(round(mean(septKesFlow[, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))], na.rm = TRUE), 0),
round(mean(octKesFlow[, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))], na.rm = TRUE), 0),
round(sum(septKesFlow[, paste0("A", substr(names(kesFlow)[a + 1], 4,5), "taf")], na.rm = TRUE) +
sum(octKesFlow[, paste0("A", substr(names(kesFlow)[a + 1], 4,5), "taf")], na.rm = TRUE), 0),
sum(redds[ ,paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))], na.rm = TRUE),
round((sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))], na.rm = TRUE)/reddCount*100), 1),
sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")], na.rm = TRUE),
round((sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")], na.rm = TRUE)/reddCount*100), 1)))
table <- cbind(table, dflist[a])
}
knitr::kable(table)
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "light blue"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "darkorange2"
} else {
reddsTable$cols[r] <- "grey"
}
}
}
library(RColorBrewer)
if(nAlt >=3){
cols <- brewer.pal(nAlt,'Set1')
} else{
cols <- brewer.pal(3,'Set1')[1:nAlt]
}
plot(reddsTable$Estimated.Date.of.Emergence, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW,
pch = 16, col = reddsTable$cols,
main = "WR Redd Dewatering vs. Flow Alternatives",
title(xlab = "Emergence Date",  mgp=c(2,1,0)),
ylab = "KES Flow (cfs)",
cex = 2.5,
yaxp = c(ymin, ymax, round_any((ymax - ymin)/250, 1, f = ceiling)),
ylim = c(ymin, ymax),
xlim = c(min(kesFlow$Date), max(reddsTable$Estimated.Date.of.Emergence) + 5)
)
grid(nx = NULL, ny = NULL,
lty = 1,      # Grid line type
col = "gray", # Grid line color
lwd = 1)      # Grid line width
#abline( v = actualDate, col = "grey", lty = 2, lwd = 1)
#lines(kesFlow$Date, kesFlow$KES_Flow, col = "black", lwd = 2)
text(reddsTable$Estimated.Date.of.Emergence + 0.01, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW + 10, labels = reddsTable$Count)
for(a in 1:(nAlt)){
lines(kesFlow$Date , kesFlow[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,5), "cfs")], col = cols[a], lwd = 2)
}
legend("bottom", inset = c(0, -0.3), legend=c(names(kesFlow)[2:(nAlt+1)], "Emerged", "Dewatered", "Remaining"),
pch = c( rep(NA, nAlt), 16, 16, 16),
col=c(cols[1:(nAlt)], "light blue", "darkorange2",  "grey"),
lty= c(rep(1, nAlt), NA, NA, NA), cex=0.8, xpd = TRUE, horiz = TRUE)
#text(x=rep(max(kesFlow$Date)+3, 5),
#    y=c(min(kesFlow$Alt1), min(kesFlow$Alt2),
#       min(kesFlow$Alt3), min(kesFlow$Alt4), min(kesFlow$Alt5)),
#  pos=4, labels=c('red line', 'yellow line', 'orange line', 'green line', 'blue line'))
#data.frame(date = unique(redds$Estimated.Date.of.Emergence), )
unlink("Real-time Estimates_Prelim_Automated_Report_cache", recursive = TRUE)
setwd("I:/Lisa/Redd Dewatering/Real-time Estimates")
library(tinytex)
library(data.table)
library(plyr)
library(lubridate)
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read in redd data, converting flow to a numeric and date from character to date value
redds <- read.csv("Redds.csv", colClasses=c('character', 'character', 'num.with.commas'))
redds$Estimated.Date.of.Emergence <- as.Date(redds$Estimated.Date.of.Emergence, "%m/%d/%Y")
reddsAll <- redds
#Read in KES flow data, converting flow to a numeric and date from character to date value
kesFlow <- read.csv("kesFlow.csv")
kesFlow <- read.csv("kesFlow.csv", colClasses=c('character', rep('num.with.commas', length(kesFlow) - 1)))
kesFlow$Date <- as.Date(kesFlow$Date, "%m/%d/%Y")
nAlt <- length(kesFlow) - 1
realFlow <- read.csv("realtimeKES.csv")
realFlow$Date <- as.Date(realFlow$Date, "%m/%d/%Y")
actualDate <- format(Sys.time(), '%d %B, %Y')
nAlt
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "light blue"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "darkorange2"
} else {
reddsTable$cols[r] <- "grey"
}
}
}
library(RColorBrewer)
if(nAlt >=3){
cols <- brewer.pal(nAlt,'Set1')
} else{
cols <- brewer.pal(3,'Set1')[1:nAlt]
}
plot(reddsTable$Estimated.Date.of.Emergence, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW,
pch = 16, col = reddsTable$cols,
main = "WR Redd Dewatering vs. Flow Alternatives",
title(xlab = "Emergence Date",  mgp=c(2,1,0)),
ylab = "KES Flow (cfs)",
cex = 2.5,
yaxp = c(ymin, ymax, round_any((ymax - ymin)/250, 1, f = ceiling)),
ylim = c(ymin, ymax),
xlim = c(min(kesFlow$Date), max(reddsTable$Estimated.Date.of.Emergence) + 5)
)
grid(nx = NULL, ny = NULL,
lty = 1,      # Grid line type
col = "gray", # Grid line color
lwd = 1)      # Grid line width
#abline( v = actualDate, col = "grey", lty = 2, lwd = 1)
#lines(kesFlow$Date, kesFlow$KES_Flow, col = "black", lwd = 2)
text(reddsTable$Estimated.Date.of.Emergence + 0.01, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW + 10, labels = reddsTable$Count)
for(a in 1:(nAlt)){
lines(kesFlow$Date , kesFlow[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,5), "cfs")], col = cols[a], lwd = 2)
}
reddCount <- 1059 #check YYYY Winter-run data file.xls, Reporting page (currently cell B88)
countDate <- "September 28, 2022"
updatedReddInfoDate <- "October 5, 2022"
conservationFish <- 79
#show_extra = TRUE
setwd("I:/Lisa/Redd Dewatering/Real-time Estimates")
library(tinytex)
library(data.table)
library(plyr)
library(lubridate)
#this function will convert the character values (from xlsx format of numbers with commas) to numeric class values
setClass("num.with.commas")
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
#Read in redd data, converting flow to a numeric and date from character to date value
redds <- read.csv("Redds.csv", colClasses=c('character', 'character', 'num.with.commas'))
redds$Estimated.Date.of.Emergence <- as.Date(redds$Estimated.Date.of.Emergence, "%m/%d/%Y")
reddsAll <- redds
#Read in KES flow data, converting flow to a numeric and date from character to date value
kesFlow <- read.csv("kesFlow.csv")
kesFlow <- read.csv("kesFlow.csv", colClasses=c('character', rep('num.with.commas', length(kesFlow) - 1)))
kesFlow$Date <- as.Date(kesFlow$Date, "%m/%d/%Y")
nAlt <- length(kesFlow) - 1
realFlow <- read.csv("realtimeKES.csv")
realFlow$Date <- as.Date(realFlow$Date, "%m/%d/%Y")
actualDate <- format(Sys.time(), '%d %B, %Y')
# Thousand Acre Feet
for(a in 1:nAlt){
kesFlow[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,5), "cfs")] <- NA
kesFlow[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,5), "taf")] <- NA
}
for(a in 1:nAlt){
for(r in 1: nrow(kesFlow)){
kesFlow[r, paste0("A", substr(names(kesFlow)[a + 1], 4,5), "cfs")] <- kesFlow[r, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))]
kesFlow[r, paste0("A", substr(names(kesFlow)[a + 1], 4,5), "taf")] <- (kesFlow[r, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))]*1.983)/1000
}
}
septKesFlow <- subset(kesFlow, months(kesFlow$Date) == "September")
octKesFlow <- subset(kesFlow, months(kesFlow$Date) == "October")
# Estimated number of redds dewatered
for(a in 1:(nAlt)){
redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))] <- NA
}
redds <- subset(redds, redds$Status == "OK" | redds$Status == "DEWATERED")
for(r in 1:nrow(redds)){ #loop over redds
for(f in 1:nrow(kesFlow)){ #loop over KES flow
for(a in 1:nAlt){ #loop over alternatives
if(kesFlow$Date[f] == redds$Estimated.Date.of.Emergence[r]){ #if dates match
if(kesFlow[f, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))] <= redds$ACTUAL.or.ESTIMATED..DEWATER.FLOW[r]){ #If KES flow is < or = redd dewatering flow, 1 (dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))] <- 1
} else{ #If KES flow is greater than redd dewatering flow, mark 0 (not dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))] <- redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))]
} #ends else
}
} #ends if date is the same
} #end looping over KES flow dataframe
} #end looping over redds dataframe
#Based on the `r countDate` redd count:
# Estimated number of redds dewatered with a 100cfs buffer
for(a in 1:nAlt){
redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")] <- NA
}
for(r in 1:nrow(redds)){ #loop over redds
for(f in 1:nrow(kesFlow)){ #loop over KES flow
for(a in 1:nAlt){ #loop over alternatives
if(kesFlow$Date[f] == redds$Estimated.Date.of.Emergence[r]){ #if dates match
if(kesFlow[f, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))] <= redds$ACTUAL.or.ESTIMATED..DEWATER.FLOW[r] + 100){ #If KES flow is < or = redd dewatering flow, 1 (dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")] <- 1
} else{ #If KES flow is greater than redd dewatering flow, mark 0 (not dewatered)
redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")] <- redds[r, paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))]
} #ends else
}
} #ends if date is the same
} #end looping over KES flow dataframe
} #end looping over redds dataframe
#Based on the `r countDate` redd count:
Metric <- c("Avg Sept Flow (cfs)", "Avg Oct Flow (cfs)", "Total Sept-Oct Flow (TAF)", "Redds dewatered", "Percent Lost", "Redds dewatered (w/ 100cfs buffer)", "Percent Lost (w/ 100cfs buffer)")
table <- data.frame(Metric)
d <- rep(NA, nAlt)
dflist = vector("list", nAlt) # creating an empty list
dfnames <- rep(NA, nAlt)
for(a in 1:(nAlt)){
d[a] = paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))
dfnames[a] = paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))
names(dflist) = dfnames # naming the list
dflist[[a]] <- as.character(c(round(mean(septKesFlow[, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))], na.rm = TRUE), 0),
round(mean(octKesFlow[, paste0("Alt", substr(names(kesFlow)[a + 1], 4,5))], na.rm = TRUE), 0),
round(sum(septKesFlow[, paste0("A", substr(names(kesFlow)[a + 1], 4,5), "taf")], na.rm = TRUE) +
sum(octKesFlow[, paste0("A", substr(names(kesFlow)[a + 1], 4,5), "taf")], na.rm = TRUE), 0),
sum(redds[ ,paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))], na.rm = TRUE),
round((sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5))], na.rm = TRUE)/reddCount*100), 1),
sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")], na.rm = TRUE),
round((sum(redds[ ,  paste0("dewateredAlt", substr(names(kesFlow)[a + 1], 4,5), "Buffer")], na.rm = TRUE)/reddCount*100), 1)))
table <- cbind(table, dflist[a])
}
knitr::kable(table)
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "light blue"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "darkorange2"
} else {
reddsTable$cols[r] <- "grey"
}
}
}
library(RColorBrewer)
if(nAlt >=3){
cols <- brewer.pal(nAlt,'Set1')
} else{
cols <- brewer.pal(3,'Set1')[1:nAlt]
}
plot(reddsTable$Estimated.Date.of.Emergence, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW,
pch = 16, col = reddsTable$cols,
main = "WR Redd Dewatering vs. Flow Alternatives",
title(xlab = "Emergence Date",  mgp=c(2,1,0)),
ylab = "KES Flow (cfs)",
cex = 2.5,
yaxp = c(ymin, ymax, round_any((ymax - ymin)/250, 1, f = ceiling)),
ylim = c(ymin, ymax),
xlim = c(min(kesFlow$Date), max(reddsTable$Estimated.Date.of.Emergence) + 5)
)
grid(nx = NULL, ny = NULL,
lty = 1,      # Grid line type
col = "gray", # Grid line color
lwd = 1)      # Grid line width
#abline( v = actualDate, col = "grey", lty = 2, lwd = 1)
#lines(kesFlow$Date, kesFlow$KES_Flow, col = "black", lwd = 2)
text(reddsTable$Estimated.Date.of.Emergence + 0.01, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW + 10, labels = reddsTable$Count)
for(a in 1:(nAlt)){
lines(kesFlow$Date , kesFlow[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,5), "cfs")], col = cols[a], lwd = 2)
}
legend("bottom", inset = c(0, -0.3), legend=c(names(kesFlow)[2:(nAlt+1)], "Emerged", "Dewatered", "Remaining"),
pch = c( rep(NA, nAlt), 16, 16, 16),
col=c(cols[1:(nAlt)], "light blue", "darkorange2",  "grey"),
lty= c(rep(1, nAlt), NA, NA, NA), cex=0.8, xpd = TRUE, horiz = TRUE)
#text(x=rep(max(kesFlow$Date)+3, 5),
#    y=c(min(kesFlow$Alt1), min(kesFlow$Alt2),
#       min(kesFlow$Alt3), min(kesFlow$Alt4), min(kesFlow$Alt5)),
#  pos=4, labels=c('red line', 'yellow line', 'orange line', 'green line', 'blue line'))
#data.frame(date = unique(redds$Estimated.Date.of.Emergence), )
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "light blue"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "darkorange2"
} else {
reddsTable$cols[r] <- "grey"
}
}
}
library(RColorBrewer)
if(nAlt >=3){
cols <- brewer.pal(nAlt,'Set1')
} else{
cols <- brewer.pal(3,'Set1')[1:nAlt]
}
plot(reddsTable$Estimated.Date.of.Emergence, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW,
pch = 16, col = reddsTable$cols,
main = "WR Redd Dewatering vs. Flow Alternatives",
title(xlab = "Emergence Date",  mgp=c(2,1,0)),
ylab = "KES Flow (cfs)",
cex = 2.5,
yaxp = c(ymin, ymax, round_any((ymax - ymin)/250, 1, f = ceiling)),
ylim = c(ymin, ymax),
xlim = c(min(kesFlow$Date), max(reddsTable$Estimated.Date.of.Emergence) + 5)
)
grid(nx = NULL, ny = NULL,
lty = 1,      # Grid line type
col = "gray", # Grid line color
lwd = 1)      # Grid line width
plot(reddsTable$Estimated.Date.of.Emergence, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW,
pch = 16, col = reddsTable$cols,
main = "WR Redd Dewatering vs. Flow Alternatives",
title(xlab = "Emergence Date",  mgp=c(2,1,0)),
ylab = "KES Flow (cfs)",
cex = 2.5,
yaxp = c(ymin, ymax, round_any((ymax - ymin)/250, 1, f = ceiling)),
ylim = c(ymin, ymax),
xlim = c(min(kesFlow$Date), max(reddsTable$Estimated.Date.of.Emergence) + 5)
)
grid(nx = NULL, ny = NULL,
lty = 1,      # Grid line type
col = "gray", # Grid line color
lwd = 1)      # Grid line width
#abline( v = actualDate, col = "grey", lty = 2, lwd = 1)
#lines(kesFlow$Date, kesFlow$KES_Flow, col = "black", lwd = 2)
text(reddsTable$Estimated.Date.of.Emergence + 0.01, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW + 10, labels = reddsTable$Count)
reddsDat <- reddsAll
reddsTable <- setDT(reddsDat)[,list(Count=.N), names(reddsDat)]
ymin <- round_any(min(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 1000, f = floor)
ymax <- round_any(max(reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW), 250, f = ceiling)
for(r in 1:nrow(reddsTable)){
if(reddsTable$Status[r] == "EMERGED"){
reddsTable$cols[r] <- "light blue"
} else {
if(reddsTable$Status[r] == "DEWATERED"){
reddsTable$cols[r] <- "darkorange2"
} else {
reddsTable$cols[r] <- "grey"
}
}
}
library(RColorBrewer)
if(nAlt >=3){
cols <- brewer.pal(nAlt,'Set1')
} else{
cols <- brewer.pal(3,'Set1')[1:nAlt]
}
plot(reddsTable$Estimated.Date.of.Emergence, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW,
pch = 16, col = reddsTable$cols,
main = "WR Redd Dewatering vs. Flow Alternatives",
title(xlab = "Emergence Date",  mgp=c(2,1,0)),
ylab = "KES Flow (cfs)",
cex = 2.5,
yaxp = c(ymin, ymax, round_any((ymax - ymin)/250, 1, f = ceiling)),
ylim = c(ymin, ymax),
xlim = c(min(kesFlow$Date), max(reddsTable$Estimated.Date.of.Emergence) + 5)
)
grid(nx = NULL, ny = NULL,
lty = 1,      # Grid line type
col = "gray", # Grid line color
lwd = 1)      # Grid line width
#abline( v = actualDate, col = "grey", lty = 2, lwd = 1)
#lines(kesFlow$Date, kesFlow$KES_Flow, col = "black", lwd = 2)
text(reddsTable$Estimated.Date.of.Emergence + 0.01, reddsTable$ACTUAL.or.ESTIMATED..DEWATER.FLOW + 10, labels = reddsTable$Count)
for(a in 1:(nAlt)){
lines(kesFlow$Date , kesFlow[ ,  paste0("A", substr(names(kesFlow)[a + 1], 4,5), "cfs")], col = cols[a], lwd = 2)
}
legend("bottom", inset = c(0, -0.3), legend=c(names(kesFlow)[2:(nAlt+1)], "Emerged", "Dewatered", "Remaining"),
pch = c( rep(NA, nAlt), 16, 16, 16),
col=c(cols[1:(nAlt)], "light blue", "darkorange2",  "grey"),
lty= c(rep(1, nAlt), NA, NA, NA), cex=0.8, xpd = TRUE, horiz = TRUE)
#text(x=rep(max(kesFlow$Date)+3, 5),
#    y=c(min(kesFlow$Alt1), min(kesFlow$Alt2),
#       min(kesFlow$Alt3), min(kesFlow$Alt4), min(kesFlow$Alt5)),
#  pos=4, labels=c('red line', 'yellow line', 'orange line', 'green line', 'blue line'))
#data.frame(date = unique(redds$Estimated.Date.of.Emergence), )
